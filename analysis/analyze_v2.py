# analyze_v2.py
"""
Automatic analysis and visualization for Vision-BDH v2 training results.
Reads metrics from metrics_v2.csv (generated by train_v2.py)
and creates learning curves, accuracy comparisons, and efficiency plots.
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import os
import csv

# --- Directories ---
CHECKPOINT_DIR = "./checkpoints_v2"
CSV_PATH = os.path.join(CHECKPOINT_DIR, "metrics_v2.csv")
IMAGE_DIR = "./images_v2"
os.makedirs(IMAGE_DIR, exist_ok=True)

# --- Safety check ---
if not os.path.exists(CSV_PATH):
    raise FileNotFoundError(f"Metrics file not found: {CSV_PATH}\n"
                            f"Run train_v2.py first to generate metrics_v2.csv.")


# ==============================================================================
# STEP 1: LOAD TRAINING DATA
# ==============================================================================
df = pd.read_csv(CSV_PATH)
epochs = df["epoch"].values
val_acc = df["val_accuracy"].values
train_loss = df["train_loss"].values
epoch_times = df["epoch_time_sec"].values
lrs = df["learning_rate"].values

print("=" * 60)
print(" VISION-BDH v2 TRAINING METRICS SUMMARY ")
print("=" * 60)
print(df.tail())
print("=" * 60, "\n")

# ==============================================================================
# STEP 2: DEFINE COMPARISON MODELS
# ==============================================================================
results = {
    "Vision-BDH (Original)": {
        "final_test_accuracy": 72.51,
        "params_millions": 6.5,
        "epoch_time_seconds": 7500,
        "color": "#1f77b4"
    },
    "Vision-BDH (Optimized)": {
        "final_test_accuracy": 72.68,
        "params_millions": 4.2,
        "epoch_time_seconds": 50,
        "color": "#2ca02c"
    },
    "Vision-BDH v2": {
        "val_accuracy_per_epoch": val_acc.tolist(),
        "final_test_accuracy": 78.76,
        "params_millions": 4.1,
        "epoch_time_seconds": np.mean(epoch_times),
        "color": "#9467bd"
    },
    "ViT-Tiny": {
        "final_test_accuracy": 65.96,
        "params_millions": 5.7,
        "epoch_time_seconds": 45,
        "color": "#ff7f0e"
    }
}


# ==============================================================================
# STEP 3: VISUALIZATIONS
# ==============================================================================

def plot_learning_curve(epochs, val_acc, train_loss):
    """
    Plot validation accuracy and training loss curves.
    """
    plt.style.use("seaborn-v0_8-whitegrid")
    fig, ax1 = plt.subplots(figsize=(12, 7))

    ax1.plot(epochs, val_acc, label="Validation Accuracy (%)", color="#9467bd", marker="o", linewidth=2)
    ax1.set_xlabel("Epoch", fontsize=14, fontweight="bold")
    ax1.set_ylabel("Validation Accuracy (%)", fontsize=14, color="#9467bd", fontweight="bold")
    ax1.tick_params(axis="y", labelcolor="#9467bd")

    ax2 = ax1.twinx()
    ax2.plot(epochs, train_loss, label="Train Loss", color="#d62728", linestyle="--", linewidth=2)
    ax2.set_ylabel("Training Loss", fontsize=14, color="#d62728", fontweight="bold")
    ax2.tick_params(axis="y", labelcolor="#d62728")

    plt.title("Vision-BDH v2 Training Progress", fontsize=18, fontweight="bold")
    fig.tight_layout()

    save_path = os.path.join(IMAGE_DIR, "v2_learning_curve.png")
    plt.savefig(save_path, dpi=300, bbox_inches="tight")
    print(f"✓ Saved: {save_path}")
    plt.show()


def plot_final_accuracy_comparison(results_data):
    """
    Bar chart comparing final test accuracies of BDH versions.
    """
    plt.style.use("seaborn-v0_8-whitegrid")
    fig, ax = plt.subplots(figsize=(10, 6))

    model_names = list(results_data.keys())
    accuracies = [m["final_test_accuracy"] for m in results_data.values()]
    colors = [m["color"] for m in results_data.values()]

    bars = ax.bar(model_names, accuracies, color=colors, alpha=0.85, edgecolor="black")

    ax.set_title("Final Test Accuracy Comparison", fontsize=18, fontweight="bold")
    ax.set_ylabel("Test Accuracy (%)", fontsize=14)
    ax.set_ylim(0, max(accuracies) + 10)

    for bar in bars:
        yval = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f"{yval:.2f}%", 
                ha="center", va="bottom", fontsize=12, fontweight="bold")

    plt.xticks(rotation=15, ha="right")
    plt.tight_layout()
    save_path = os.path.join(IMAGE_DIR, "v2_final_accuracy_comparison.png")
    plt.savefig(save_path, dpi=300, bbox_inches="tight")
    print(f"✓ Saved: {save_path}")
    plt.show()


def plot_efficiency_comparison(results_data):
    """
    Scatter: Accuracy vs Training Time (epoch_time_seconds)
    """
    plt.style.use("seaborn-v0_8-whitegrid")
    fig, ax = plt.subplots(figsize=(11, 7))

    for name, data in results_data.items():
        ax.scatter(data["epoch_time_seconds"], data["final_test_accuracy"],
                   s=data["params_millions"] * 100, color=data["color"], alpha=0.7,
                   edgecolors="black", linewidth=1.5, label=f"{name} ({data['params_millions']:.1f}M params)")

    ax.set_xscale("log")
    ax.set_xlabel("Epoch Time (seconds, log scale)", fontsize=13, fontweight="bold")
    ax.set_ylabel("Test Accuracy (%)", fontsize=13, fontweight="bold")
    ax.set_title("Efficiency Comparison: Accuracy vs Training Speed", fontsize=17, fontweight="bold")
    ax.legend(fontsize=10)
    plt.tight_layout()

    save_path = os.path.join(IMAGE_DIR, "v2_efficiency_comparison.png")
    plt.savefig(save_path, dpi=300, bbox_inches="tight")
    print(f"✓ Saved: {save_path}")
    plt.show()


def print_summary_table(results_data):
    """
    Print ASCII summary comparing BDH versions.
    """
    print("\n" + "=" * 80)
    print(" VISION-BDH FAMILY: PERFORMANCE SUMMARY ")
    print("=" * 80)
    print(f"{'Model':<28} {'Params(M)':<10} {'Acc(%)':<10} {'Epoch(s)':<10}")
    print("-" * 80)

    for name, data in results_data.items():
        print(f"{name:<28} {data['params_millions']:<10.2f} "
              f"{data['final_test_accuracy']:<10.2f} {data['epoch_time_seconds']:<10.1f}")

    print("=" * 80)
    print(f"v2 achieved +{results_data['Vision-BDH v2']['final_test_accuracy'] - results_data['Vision-BDH (Optimized)']['final_test_accuracy']:.2f}pp "
          f"improvement over Optimized, "
          f"and {(results_data['Vision-BDH (Original)']['epoch_time_seconds'] / results_data['Vision-BDH v2']['epoch_time_seconds']):.1f}× faster than Original.")
    print("=" * 80 + "\n")


# ==============================================================================
# STEP 4: EXECUTE
# ==============================================================================

if __name__ == "__main__":
    print_summary_table(results)
    plot_learning_curve(epochs, val_acc, train_loss)
    plot_final_accuracy_comparison(results)
    plot_efficiency_comparison(results)

    print("\n✓ All visualizations saved in:", IMAGE_DIR)
    print("✓ Data source:", CSV_PATH)
